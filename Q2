def is_palindrome(str_number):
    """
    Checks whether a number is a palindrome
    str_number: string
    returns:bool
    """
    reverse=str_number[-1::-1]
    if str_number==reverse:
        return True
    else:
        return False


def check_palindrome():
   """
   Runs through all 6-digit numbers and checks the mentioned conditions.
   The function prints out the numbers that satisfy this condition.
   """
   #Go through all 6-digit numbres:
   for number in range(100000,1000000):
       str_number = str(number)
       #Check if the first number has a palindrome in its last four digits:
       if is_palindrome(str_number[-4:len(str_number)]):
           #Check if after assing 1, the result has a palindrome in its last five digits:
           str_number = str(number+1)
           if is_palindrome(str_number[-5:len(str_number)]):
               #Check if after adding 2 to the original number, the result has a palindrome in the middle four digits:
               str_number = str(number+2)
               if is_palindrome(str_number[1:5]):
                   #Check if after adding 3 to the original number, the result is a 6-digit palindrome:
                   str_number = str(number+3)
                   if is_palindrome(str_number):
                       print(number) #Print the original number if all conditions apply

check_palindrome()
